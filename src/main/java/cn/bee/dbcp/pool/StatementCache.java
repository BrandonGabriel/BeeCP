/*
 * Copyright Chris2018998
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cn.bee.dbcp.pool;
import static cn.bee.dbcp.pool.util.ConnectionUtil.oclose;

import java.sql.PreparedStatement;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

/**
 * Statement cache
 *
 * @author Chris.liao
 * @version 1.0
 */
public class StatementCache {
	private int capacity;
	public CacheNode head=null;//old
	public CacheNode tail=null;//new
	private HashMap<Object,CacheNode>nodeMap;
	public StatementCache(int capacity) {
		this.nodeMap = new HashMap<Object,CacheNode>((int)Math.ceil(capacity/0.75f)+1,0.75f);
		this.capacity = capacity;
	}
	public PreparedStatement get(Object k) {
		if(nodeMap.size()==0)return null;
		
		CacheNode n=nodeMap.get(k);
		if(n!=null){
			moveToTail(n);
			return n.v;
		}
		return null;
	}
	public void put(Object k,PreparedStatement v) {
		CacheNode n = nodeMap.get(k);
		if (n==null) {
			n = new CacheNode(k,v);
			nodeMap.put(k,n);
			addNewNode(n);
			
			if(nodeMap.size()>capacity) {
			  CacheNode oldHead=removeHead();
			  nodeMap.remove(oldHead.k);
			  onRemove(oldHead.k,oldHead.v);
			}
		} else {
			n.v = v;
			moveToTail(n);
		}
	}
	public void clear() {
		Iterator<Map.Entry<Object, CacheNode>> itor=nodeMap.entrySet().iterator();
		while (itor.hasNext()) {
			Map.Entry<Object,CacheNode> entry = (Map.Entry<Object, CacheNode>) itor.next();
			itor.remove();
			 CacheNode node= entry.getValue();
			 onRemove(node.k,node.v);
		}
		
		head=null;
		tail=null;
	}
	private void onRemove(Object key, PreparedStatement obj) {
		oclose(obj);
	}
	//add new node
	private void addNewNode(CacheNode n) {
		if (head == null) {
			head = n;
			tail = n;
		} else {
			tail.next = n;
			n.pre = tail;
			tail = n;
		}
	}
	//below are node chain operation method
	private void moveToTail(CacheNode n) {
		if(n==tail)return;
		//remove from chain
		if (head == n) {//at head
			head = n.next;
			head.pre = null;
		} else {//at middle
			n.pre.next = n.next;
			n.next.pre = n.pre;
		}

		//append to tail
		tail.next = n;
		n.pre = tail;
		n.next = null;
		tail = tail.next;//new tail
	}
	//remove head when size more than capacity
	private CacheNode removeHead() {
		CacheNode n = head;
		if (head == tail) {
			head = null;
			tail = null;
		} else {
			head = head.next;
			head.pre = null;
		}
		return n;
	}
	static class CacheNode {// double linked chain node
		private Object k;
		private PreparedStatement v;
		private CacheNode pre = null;
		private CacheNode next = null;
		public CacheNode(Object k, PreparedStatement v) {
			this.k = k;
			this.v = v;
		}
	}
}

class PsCacheKey{
	private String sql;
	private int autoGeneratedKeys;
	private int[] columnIndexes=null;
	private String[] columnNames=null;
	private int resultSetType=0; 
	private int resultSetConcurrency=0;
	private int resultSetHoldability=0;
	
	private int type=-1;
	private int hashCode=1;
	private final static int prime=31;
	public PsCacheKey(String sql) {
		this.type=1;
		this.sql=sql;
		hashCode = prime * hashCode + type;
		hashCode = prime * hashCode + sql.hashCode();	
	}
	public PsCacheKey(String sql, int autoGeneratedKeys) {
		this.type=2;
		this.sql=sql;
		this.autoGeneratedKeys=autoGeneratedKeys;
		
		hashCode = prime * hashCode + type;
		hashCode = prime * hashCode + autoGeneratedKeys;
		hashCode = prime * hashCode + sql.hashCode();
	}
	public PsCacheKey(String sql, int[] columnIndexes) {
		this.type=3;
		this.sql=sql;
		this.columnIndexes=columnIndexes;

		hashCode = prime * hashCode + type;
		hashCode = prime * hashCode + Arrays.hashCode(columnIndexes);
		hashCode = prime * hashCode + sql.hashCode();
	}
	public PsCacheKey(String sql, String[] columnNames) {
		this.type=4;
		this.sql=sql;
		this.columnNames=columnNames;
	
		hashCode = prime * hashCode + type;
		hashCode = prime * hashCode + Arrays.hashCode(columnNames);
		hashCode = prime * hashCode + sql.hashCode();
	}
	public PsCacheKey(String sql, int resultSetType, int resultSetConcurrency) {
		this.type=5;
		this.sql=sql;
		this.resultSetType=resultSetType;
		this.resultSetConcurrency=resultSetConcurrency;
		
		hashCode = prime * hashCode + type;
		hashCode = prime * hashCode + resultSetType;
		hashCode = prime * hashCode + resultSetConcurrency;
		hashCode = prime * hashCode + sql.hashCode();
	}
	public PsCacheKey(String sql, int resultSetType, int resultSetConcurrency,int resultSetHoldability) {
		this.type=6;
		this.sql=sql;
		this.resultSetType=resultSetType;
		this.resultSetConcurrency=resultSetConcurrency;
		this.resultSetHoldability=resultSetHoldability;
		
		hashCode = prime * hashCode + type;
		hashCode = prime * hashCode + resultSetType;
		hashCode = prime * hashCode + resultSetConcurrency;
		hashCode = prime * hashCode + resultSetHoldability;
		hashCode = prime * hashCode + sql.hashCode();
	}
	
	@Override
	public int hashCode(){
		return hashCode;
	}
	@Override
	public boolean equals(Object obj) {
		if(getClass()!= obj.getClass())return false;
		PsCacheKey other=(PsCacheKey)obj;
		if(this.hashCode!=other.hashCode)return false;
		if(this.type!=other.type)return false;
		switch(this.type){
			 case 1:return this.sql.equals(other.sql);
			 case 2:return autoGeneratedKeys==other.autoGeneratedKeys && this.sql.equals(other.sql);
			 case 3:return Arrays.equals(columnIndexes, other.columnIndexes)&& this.sql.equals(other.sql);
			 case 4:return Arrays.equals(columnNames, other.columnNames)&& this.sql.equals(other.sql);
			 case 5:return resultSetType==other.resultSetType && resultSetConcurrency==other.resultSetConcurrency && this.sql.equals(other.sql);
			 case 6:return resultSetType==other.resultSetType && resultSetConcurrency==other.resultSetConcurrency && resultSetHoldability==other.resultSetHoldability && this.sql.equals(other.sql);
			 default:return false;
		}
	}
}

class CsCacheKey{
	private String sql;
	private int resultSetType=0; 
	private int resultSetConcurrency=0;
	private int resultSetHoldability=0;
	
	private int type=-1;
	private int hashCode=1;
	private final static int prime=31;
	
	public CsCacheKey(String sql) {
		this.type=1;
		this.sql=sql;
		hashCode = prime * hashCode + type;
		hashCode = prime * hashCode + sql.hashCode();	
	}
	
	public CsCacheKey(String sql, int resultSetType, int resultSetConcurrency) {
		this.type=2;
		this.sql=sql;
		this.resultSetType=resultSetType;
		this.resultSetConcurrency=resultSetConcurrency;
		
		hashCode = prime * hashCode + type;
		hashCode = prime * hashCode + resultSetType;
		hashCode = prime * hashCode + resultSetConcurrency;
		hashCode = prime * hashCode + sql.hashCode();
	}
	
	public CsCacheKey(String sql, int resultSetType, int resultSetConcurrency,int resultSetHoldability) {
		this.type=3;
		this.sql=sql;
		this.resultSetType=resultSetType;
		this.resultSetConcurrency=resultSetConcurrency;
		this.resultSetHoldability=resultSetHoldability;
		
		hashCode = prime * hashCode + type;
		hashCode = prime * hashCode + resultSetType;
		hashCode = prime * hashCode + resultSetConcurrency;
		hashCode = prime * hashCode + resultSetHoldability;
		hashCode = prime * hashCode + sql.hashCode();
	}
	
	@Override
	public int hashCode(){
		return hashCode;
	}
	@Override
	public boolean equals(Object obj) {
		if(getClass()!= obj.getClass())return false;
		CsCacheKey other = (CsCacheKey)obj;
		if(this.hashCode!=other.hashCode)return false;
		if(this.type!=other.type)return false;
	
		switch(this.type){
			 case 1:return this.sql.equals(other.sql);
			 case 2:return resultSetType==other.resultSetType && resultSetConcurrency==other.resultSetConcurrency && this.sql.equals(other.sql);
			 case 3:return resultSetType==other.resultSetType && resultSetConcurrency==other.resultSetConcurrency && resultSetHoldability==other.resultSetHoldability && this.sql.equals(other.sql);
			 default:return false;
		}
	}
}