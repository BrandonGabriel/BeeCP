/*
 * Copyright Chris2018998
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cn.beecp.pool;

import java.sql.PreparedStatement;
import java.util.*;

import static cn.beecp.util.BeecpUtil.oclose;

/**
 * Statement cache
 *
 * @author Chris.liao
 * @version 1.0
 */
public class StatementCache extends LinkedHashMap<Object,PreparedStatement> {
    private int capacity;
    public StatementCache(int capacity) {
        super(capacity * 2,0.75f,true);
        this.capacity = capacity;
    }

    public boolean removeEldestEntry(Map.Entry<Object,PreparedStatement> eldest){
        if((size()>capacity)) {
            oclose(eldest.getValue());
            return true;
        }
        return false;
    }

    public void clear() {
        Iterator<PreparedStatement> itor= this.values().iterator();
        while(itor.hasNext()) oclose(itor.next());
        super.clear();
    }
}

final class CacheKey {
    private int hashCode;
    private Object[] values;

    public CacheKey(int type, String sql) {
        values = new Object[]{type, sql};
        hashCode = Arrays.hashCode(values);
    }

    public CacheKey(int type, String sql, int autoGeneratedKeys) {
        values = new Object[]{type, sql, autoGeneratedKeys};
        hashCode = Arrays.hashCode(values);
    }

    public CacheKey(int type, String sql, int[] columnIndexes) {
        values = new Object[]{type, sql, columnIndexes};
        hashCode = Arrays.hashCode(values);
    }

    public CacheKey(int type, String sql, String[] columnNames) {
        values = new Object[]{type, sql, columnNames};
        hashCode = Arrays.hashCode(values);
    }

    public CacheKey(int type, String sql, int resultSetType, int resultSetConcurrency) {
        values = new Object[]{type, sql, resultSetType, resultSetConcurrency};
        hashCode = Arrays.hashCode(values);
    }

    public CacheKey(int type, String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
        values = new Object[]{type, sql, resultSetType, resultSetConcurrency, resultSetHoldability};
        hashCode = Arrays.hashCode(values);
    }

    public int hashCode() {
        return hashCode;
    }

    public boolean equals(Object obj) {
        return Arrays.equals(this.values, ((CacheKey) obj).values);
    }
}


