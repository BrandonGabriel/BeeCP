package org.jmin.bee.pool;

import java.util.Arrays;

/**
 * preparedStatement cache key
 *
 * @author Chris.Liao
 * @version 1.0
 */
public class StatementPsCacheKey{
	private String sql = null;
	private int resultSetType;
	private int resultSetConcurrency;
	private int resultSetHoldability;
	private int autoGeneratedKeys;
	private int[] columnIndexes;
	private String[] columnNames = null;
	private String statementType = "PS";
	private int hashCode;
	
	public StatementPsCacheKey(String sql) {
		this.sql = sql;
		this.hashCode = this.buildHashCode();
	}

	public StatementPsCacheKey(String sql, int autoGeneratedKeys) {
		this.sql = sql;
		this.autoGeneratedKeys = autoGeneratedKeys;
		this.hashCode = this.buildHashCode();
	}

	public StatementPsCacheKey(String sql, int[] columnIndexes) {
		this.sql = sql;
		this.columnIndexes = columnIndexes;
		this.hashCode = this.buildHashCode();
	}

	public StatementPsCacheKey(String sql, String[] columnNames) {
		this.sql = sql;
		this.columnNames = columnNames;
		this.hashCode = this.buildHashCode();
	}

	public StatementPsCacheKey(String sql, int resultSetType, int resultSetConcurrency) {
		this.sql = sql;
		this.resultSetType = resultSetType;
		this.resultSetConcurrency = resultSetConcurrency;
		this.hashCode = this.buildHashCode();
	}

	public StatementPsCacheKey(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) {
		this.sql = sql;
		this.resultSetType = resultSetType;
		this.resultSetHoldability = resultSetHoldability;
		this.hashCode = this.buildHashCode();
	}

	private int buildHashCode() {
		final int prime = 31;
		int result = 1;
		
		result = prime * result + statementType.hashCode();
		result = prime * result + autoGeneratedKeys;
		result = prime * result + Arrays.hashCode(columnIndexes);
		result = prime * result + Arrays.hashCode(columnNames);
		result = prime * result + resultSetConcurrency;
		result = prime * result + resultSetHoldability;
		result = prime * result + resultSetType;
		result = prime * result + sql.hashCode();
		
		return result;
	}
	
	@Override
	public int hashCode() {
	  return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if(!(obj instanceof StatementPsCacheKey))
			return false;
		
		StatementPsCacheKey other = (StatementPsCacheKey) obj;
		if (!(hashCode == other.hashCode 
				&& resultSetConcurrency == other.resultSetConcurrency 
				&& resultSetHoldability == other.resultSetHoldability
				&& resultSetType == other.resultSetType))
			return false;
		
		if(!statementType.equals(other.statementType))
			return false;
		if (autoGeneratedKeys != other.autoGeneratedKeys)
			return false;
		if (!Arrays.equals(columnIndexes, other.columnIndexes))
			return false;
		if (!Arrays.equals(columnNames, other.columnNames))
			return false;

		if (!sql.equals(other.sql))
			return false;
		return true;
		 
	}

	@Override
	public String toString() {
		final StringBuffer buf = new StringBuffer();
		buf.append("StatementCacheKey: sql=");
		buf.append(sql);
		buf.append(", resultSetType=");
		buf.append(resultSetType);
		buf.append(", resultSetConcurrency=");
		buf.append(resultSetConcurrency);
		buf.append(", resultSetHoldability=");
		buf.append(resultSetHoldability);
		buf.append(", autoGeneratedKeys=");
		buf.append(autoGeneratedKeys);
		buf.append(", columnIndexes=");
		buf.append(Arrays.toString(columnIndexes));
		buf.append(", columnNames=");
		buf.append(Arrays.toString(columnNames));
		buf.append(", statementType=");
		buf.append(statementType);
		return buf.toString();
	}
}
